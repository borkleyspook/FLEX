name: iOS Build

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

permissions:
  actions: read
  contents: write

jobs:
  build-ios:
    name: Build iOS Project
    runs-on: macOS-latest
    
    strategy:
      matrix:
        scheme: [FLEX]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        xcodebuild -version

    - name: List Available Schemes
      run: |
        echo "=== Available schemes ==="
        xcodebuild -workspace "FLEX.xcodeproj/project.xcworkspace" -list
        echo ""
        echo "=== Project configurations ==="
        xcodebuild -project "FLEX.xcodeproj" -list

    - name: Install xcpretty
      run: gem install xcpretty

    - name: Clean build directory
      run: |
        echo "=== Checking standard build locations ==="
        # Check standard DerivedData location
        DERIVED_DATA="$HOME/Library/Developer/Xcode/DerivedData"
        if [ -d "$DERIVED_DATA" ]; then
          echo "DerivedData directory exists"
          # Find FLEX-related builds
          find "$DERIVED_DATA" -name "*FLEX*" -type d | head -10
        fi
        
        # Check current directory
        echo "=== Current directory build products ==="
        find . -name "build" -type d | head -5
        if [ -d "build" ]; then
          find build -type f -name "*.framework" -o -name "*.a" -o -name "*.dylib" | head -20
        fi
        rm -rf build artifacts
        mkdir -p build artifacts

    - name: Build FLEX framework
      run: |
        # Try building with explicit output paths
        rm -rf BuildOutput
        mkdir -p BuildOutput
        
        xcodebuild -workspace "FLEX.xcodeproj/project.xcworkspace" \
          -scheme FLEX \
          -sdk iphoneos \
          -configuration Release \
          -derivedDataPath ./BuildOutput \
          -archivePath ./BuildOutput/FLEX.xcarchive \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO \
          archive

    - name: Find and collect build products
      run: |
        echo "=== BuildOutput contents ==="
        if [ -d "BuildOutput" ]; then
          find BuildOutput -type f | head -20
          ls -la BuildOutput/
        else
          echo "BuildOutput directory not created"
        echo "=== Searching for build products ==="
        
        # Search in common locations
        find . -name "*.framework" -o -name "*.a" -o -name "FLEX*" -type f | grep -v ".git" | head -20
        
        # Check build directory structure
        if [ -d "./build" ]; then
          echo "=== Build directory contents ==="
          find ./build -type f -name "*.framework" -o -name "*.a" -o -name "*.app" | head -20
          
          # Copy any found frameworks
          find ./build -name "FLEX.framework" -type d | head -1 | while read framework; do
            echo "Found framework: $framework"
            cp -R "$framework" artifacts/
          done
        fi

    - name: Create simple artifact
      run: |
        # Always create at least one artifact file
        mkdir -p artifacts
        echo "Build completed: $(date)" > artifacts/build-info.txt
        echo "Scheme: FLEX" >> artifacts/build-info.txt
        echo "Configuration: Release" >> artifacts/build-info.txt
        echo "SDK: iphoneos" >> artifacts/build-info.txt
        
        # If we have actual build products, include them
        if [ -d "BuildOutput" ]; then
          cp -r BuildOutput artifacts/ || true
        fi
        # If no framework found, create a simple success file
        if [ -z "$(ls -A artifacts/ 2>/dev/null)" ]; then
          echo "Build completed successfully - no framework products found" > artifacts/build-success.txt
          echo "Scheme: ${{ matrix.scheme }}" >> artifacts/build-success.txt
          echo "Date: $(date)" >> artifacts/build-success.txt
        fi

        echo "=== Final artifacts ==="
        ls -la artifacts/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ github.run_number }}-${{ matrix.scheme }}
        path: artifacts/
        retention-days: 7

    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_number }}
        release_name: Build ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Build to Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: artifacts/*
        tag: build-${{ github.run_number }}
        overwrite: true